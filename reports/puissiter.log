Traceback (most recent call last):
  File "/usr/local/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/local/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/local/Cellar/python@3.9/3.9.13/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 559, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.patches import FancyArrowPatch
from mpl_toolkits.mplot3d.proj3d import proj_transform
from matplotlib.text import Annotation


class Arrow3D(FancyArrowPatch):

    def __init__(self, x, y, z, dx, dy, dz, *args, **kwargs):
        super().__init__((0, 0), (0, 0), *args, **kwargs)
        self._xyz = (x, y, z)
        self._dxdydz = (dx, dy, dz)

    def draw(self, renderer):
        x1, y1, z1 = self._xyz
        dx, dy, dz = self._dxdydz
        x2, y2, z2 = (x1 + dx, y1 + dy, z1 + dz)

        xs, ys, zs = proj_transform((x1, x2), (y1, y2), (z1, z2), self.axes.M)
        self.set_positions((xs[0], ys[0]), (xs[1], ys[1]))
        super().draw(renderer)
        
    def do_3d_projection(self, renderer=None):
        x1, y1, z1 = self._xyz
        dx, dy, dz = self._dxdydz
        x2, y2, z2 = (x1 + dx, y1 + dy, z1 + dz)

        xs, ys, zs = proj_transform((x1, x2), (y1, y2), (z1, z2), self.axes.M)
        self.set_positions((xs[0], ys[0]), (xs[1], ys[1]))

        return np.min(zs) 

def _arrow3D(ax, x, y, z, dx, dy, dz, *args, **kwargs):
    '''Add an 3d arrow to an `Axes3D` instance.'''

    arrow = Arrow3D(x, y, z, dx, dy, dz, *args, **kwargs)
    ax.add_artist(arrow)
setattr(Axes3D, 'arrow3D', _arrow3D)


def plot_vector3d(ax,vector3d, origin=[0, 0, 0], **options):
    return ax.arrow3D(origin[0], origin[1], origin[2], vector3d[0], vector3d[1],vector3d[2],
              arrowstyle="-|>",
              **options)


class Annotation3D(Annotation):

    def __init__(self, text, xyz, *args, **kwargs):
        super().__init__(text, xy=(0, 0), *args, **kwargs)
        self._xyz = xyz

    def draw(self, renderer):
        x2, y2, z2 = proj_transform(*self._xyz, self.axes.M)
        self.xy = (x2, y2)
        super().draw(renderer)
        
        
def _annotate3D(ax, text, xyz, *args, **kwargs):
    '''Add anotation `text` to an `Axes3d` instance.'''

    annotation = Annotation3D(text, xyz, *args, **kwargs)
    ax.add_artist(annotation)
setattr(Axes3D, 'annotate3D', _annotate3D)

def puissiter(A,v0,lam,niter,epsilon):
    v = v0
    vv=[v0]
    l = np.dot(v0,np.dot(A,v0))
    ll = [l]
    k=0
    while np.fabs(lam-l)>epsilon and k<niter:
        w = np.dot(A,v)
        v = w/np.linalg.norm(w)
        l = np.dot(v,np.dot(A,v))
        vv.append(v)
        ll.append(l)
        k=k+1
    return ll, vv,k

A = np.array([[2.,1,-1],[1,3,1],[-1,1,4]])
w,v=np.linalg.eig(A)
vmax = v[:, np.argmax(w)]
lam =np.max(w)
print("La plus grande valeur propre de A est ",lam)

epsilon = 1e-4
niter=50
ll, vv,k = puissiter(A,np.ones(3),lam,niter,epsilon)

fig = plt.figure(figsize=(8,8))
plt.plot(range(len(ll)),ll,'-o',label='Puissances itÃ©rÃ©es')
plt.plot(range(len(ll)),lam*np.ones((len(ll)), dtype=np.uint8) ,'r')
plt.ylabel('valeur propre')
plt.xlabel('Iteration');
plt.text(0, lam+0.3, "$\lambda$", color="r", fontsize=18)
plt.legend()
plt.title("Valeur propre approchÃ©e Ã  "+ str(epsilon)+" prÃ¨s en "+str(k)+" itÃ©rations")

fig = plt.figure(figsize=(8,8))
ax = fig.add_subplot(111, projection='3d')
#plt.subplot(122)
plot_vector3d(ax,vv[0], color="b",mutation_scale=20)
ax.annotate3D('$v_0$', (vv[0][0],vv[0][1],vv[0][2]), xytext=(10, 10), textcoords='offset points',color="b")
for i in range(1,k):
    plot_vector3d(ax,vv[i], color="g",alpha = 1-float(i)/k,mutation_scale=20)
    if i%2==0 :
        ax.annotate3D('v('+str(i)+')', (vv[i][0],vv[i][1],vv[i][2]), xytext=(3, 3), textcoords='offset points')

#        plt.text(vv[i][0],vv[i][1]+0.05,vv[i][2],'v('+str(i)+')',color="g")
plot_vector3d(ax,vmax, color="r",mutation_scale=20)
ax.annotate3D('$v_\lambda$', (vmax[0],vmax[1],vmax[2]), xytext=(-8, 10), textcoords='offset points',color="r",fontsize=18,linewidth=3)
plt.title("Vecteur propre approchÃ©")
plt.tight_layout()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Input [0;32mIn [1][0m, in [0;36m<module>[0;34m[0m
[1;32m    112[0m [38;5;66;03m#        plt.text(vv[i][0],vv[i][1]+0.05,vv[i][2],'v('+str(i)+')',color="g")[39;00m
[1;32m    113[0m plot_vector3d(ax,vmax, color[38;5;241m=[39m[38;5;124m"[39m[38;5;124mr[39m[38;5;124m"[39m,mutation_scale[38;5;241m=[39m[38;5;241m20[39m)
[0;32m--> 114[0m [43max[49m[38;5;241;43m.[39;49m[43mannotate3D[49m[43m([49m[38;5;124;43m'[39;49m[38;5;124;43m$v_[39;49m[38;5;124;43m\[39;49m[38;5;124;43mlambda$[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[43m([49m[43mvmax[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[43m,[49m[43mvmax[49m[43m[[49m[38;5;241;43m1[39;49m[43m][49m[43m,[49m[43mvmax[49m[43m[[49m[38;5;241;43m2[39;49m[43m][49m[43m)[49m[43m,[49m[43m [49m[43mxytext[49m[38;5;241;43m=[39;49m[43m([49m[38;5;241;43m-[39;49m[38;5;241;43m8[39;49m[43m,[49m[43m [49m[38;5;241;43m10[39;49m[43m)[49m[43m,[49m[43m [49m[43mtextcoords[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43moffset points[39;49m[38;5;124;43m'[39;49m[43m,[49m[43mcolor[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mr[39;49m[38;5;124;43m"[39;49m[43m,[49m[43mfontsize[49m[38;5;241;43m=[39;49m[38;5;241;43m18[39;49m[43m,[49m[43mlinewidth[49m[38;5;241;43m=[39;49m[38;5;241;43m3[39;49m[43m)[49m
[1;32m    115[0m plt[38;5;241m.[39mtitle([38;5;124m"[39m[38;5;124mVecteur propre approchÃ©[39m[38;5;124m"[39m)
[1;32m    116[0m plt[38;5;241m.[39mtight_layout()

Input [0;32mIn [1][0m, in [0;36m_annotate3D[0;34m(ax, text, xyz, *args, **kwargs)[0m
[1;32m     61[0m [38;5;28;01mdef[39;00m [38;5;21m_annotate3D[39m(ax, text, xyz, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs):
[1;32m     62[0m     [38;5;124;03m'''Add anotation `text` to an `Axes3d` instance.'''[39;00m
[0;32m---> 64[0m     annotation [38;5;241m=[39m [43mAnnotation3D[49m[43m([49m[43mtext[49m[43m,[49m[43m [49m[43mxyz[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m     65[0m     ax[38;5;241m.[39madd_artist(annotation)

Input [0;32mIn [1][0m, in [0;36mAnnotation3D.__init__[0;34m(self, text, xyz, *args, **kwargs)[0m
[1;32m     51[0m [38;5;28;01mdef[39;00m [38;5;21m__init__[39m([38;5;28mself[39m, text, xyz, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs):
[0;32m---> 52[0m     [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[38;5;21;43m__init__[39;49m[43m([49m[43mtext[49m[43m,[49m[43m [49m[43mxy[49m[38;5;241;43m=[39;49m[43m([49m[38;5;241;43m0[39;49m[43m,[49m[43m [49m[38;5;241;43m0[39;49m[43m)[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m     53[0m     [38;5;28mself[39m[38;5;241m.[39m_xyz [38;5;241m=[39m xyz

File [0;32m/usr/local/lib/python3.9/site-packages/matplotlib/text.py:1825[0m, in [0;36mAnnotation.__init__[0;34m(self, text, xy, xytext, xycoords, textcoords, arrowprops, annotation_clip, **kwargs)[0m
[1;32m   1822[0m     [38;5;28mself[39m[38;5;241m.[39marrow_patch [38;5;241m=[39m [38;5;28;01mNone[39;00m
[1;32m   1824[0m [38;5;66;03m# Must come last, as some kwargs may be propagated to arrow_patch.[39;00m
[0;32m-> 1825[0m [43mText[49m[38;5;241;43m.[39;49m[38;5;21;43m__init__[39;49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mx[49m[43m,[49m[43m [49m[43my[49m[43m,[49m[43m [49m[43mtext[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/usr/local/lib/python3.9/site-packages/matplotlib/text.py:160[0m, in [0;36mText.__init__[0;34m(self, x, y, text, color, verticalalignment, horizontalalignment, multialignment, fontproperties, rotation, linespacing, rotation_mode, usetex, wrap, transform_rotates_text, parse_math, **kwargs)[0m
[1;32m    158[0m [38;5;28mself[39m[38;5;241m.[39m_linespacing [38;5;241m=[39m linespacing
[1;32m    159[0m [38;5;28mself[39m[38;5;241m.[39mset_rotation_mode(rotation_mode)
[0;32m--> 160[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mupdate[49m[43m([49m[43mkwargs[49m[43m)[49m

File [0;32m/usr/local/lib/python3.9/site-packages/matplotlib/text.py:172[0m, in [0;36mText.update[0;34m(self, kwargs)[0m
[1;32m    170[0m [38;5;66;03m# Update bbox last, as it depends on font properties.[39;00m
[1;32m    171[0m bbox [38;5;241m=[39m kwargs[38;5;241m.[39mpop([38;5;124m"[39m[38;5;124mbbox[39m[38;5;124m"[39m, sentinel)
[0;32m--> 172[0m [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[43mupdate[49m[43m([49m[43mkwargs[49m[43m)[49m
[1;32m    173[0m [38;5;28;01mif[39;00m bbox [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m sentinel:
[1;32m    174[0m     [38;5;28mself[39m[38;5;241m.[39mset_bbox(bbox)

File [0;32m/usr/local/lib/python3.9/site-packages/matplotlib/artist.py:1064[0m, in [0;36mArtist.update[0;34m(self, props)[0m
[1;32m   1062[0m             func [38;5;241m=[39m [38;5;28mgetattr[39m([38;5;28mself[39m, [38;5;124mf[39m[38;5;124m"[39m[38;5;124mset_[39m[38;5;132;01m{[39;00mk[38;5;132;01m}[39;00m[38;5;124m"[39m, [38;5;28;01mNone[39;00m)
[1;32m   1063[0m             [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m callable(func):
[0;32m-> 1064[0m                 [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00m[38;5;28mtype[39m([38;5;28mself[39m)[38;5;241m.[39m[38;5;18m__name__[39m[38;5;132;01m!r}[39;00m[38;5;124m object [39m[38;5;124m"[39m
[1;32m   1065[0m                                      [38;5;124mf[39m[38;5;124m"[39m[38;5;124mhas no property [39m[38;5;132;01m{[39;00mk[38;5;132;01m!r}[39;00m[38;5;124m"[39m)
[1;32m   1066[0m             ret[38;5;241m.[39mappend(func(v))
[1;32m   1067[0m [38;5;28;01mif[39;00m ret:

[0;31mAttributeError[0m: 'Annotation3D' object has no property 'linewidth'
AttributeError: 'Annotation3D' object has no property 'linewidth'

