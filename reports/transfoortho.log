Traceback (most recent call last):
  File "/usr/local/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/local/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/local/Cellar/python@3.9/3.9.13/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 559, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def ModifiedGramSchmidt(A):

    n = A.shape[1]
    R = np.zeros([n,n])
    V = np.zeros(A.shape)
    Q = np.zeros(A.shape)
    for i in range(n):
        V[:,i] = A[:,i]
    for i in range(n):
        R[i,i] = np.linalg.norm(V[:,i],2)
        Q[:,i] = V[:,i]/R[i,i]
        for j in range(i,n):
            R[i,j] = np.dot(Q[:,i].T,V[:,j])
            V[:,j] = V[:,j] - R[i,j]*Q[:,i]
    return Q, R
``
et une factorisation QR par Householder sur la factorisation QR d'une matrice de Hilbert de taille croissante.

import matplotlib.pyplot as plt
from scipy.linalg import hilbert
ortho =[]
orthos = []
orthoh = []

diagR = []
diagRs = []
diagRh = []

x = np.arange(10, 200,100)
for n in x:
    H = hilbert(n)
    Q, R = GramSchmidt(H)
    Qs,Rs = ModifiedGramSchmidt(H)
    Qh, Rh = np.linalg.qr(H)
    ortho.append(np.linalg.norm(np.dot(Q.T,Q)-np.eye(n)))
    orthos.append(np.linalg.norm(np.dot(Qs.T,Qs)-np.eye(n)))
    orthoh.append(np.linalg.norm(np.dot(Qh.T,Qh)-np.eye(n)))
    diagR.append(np.diag(R))
    diagR.append(np.diag(Rs))
    diagR.append(np.diag(Rh))



fig, axs = plt.subplots(1, 2, figsize=(12, 3))
axs[0].plot(x,ortho,'r',label='GS classique')
axs[0].plot(x,orthoh,'b',label='Householder')
axs[0].plot(x,orthos,'g',label='GS modifi√©')
axs[0].legend()
axs[0].set_xlabel('$n$')
axs[0].set_ylabel('$||Q^TQ-I||$')
plt.tight_layout()

axs[1].semilogy(x,orthoh,'b',label='Householder')
axs[1].semilogy(x,orthos,'g',label='GS modifi√©')
axs[1].legend()
plt.xlabel('$n$')
plt.ylabel('log($||Q^TQ-I||$)')
plt.suptitle("Test d'orthogonalit√© de $Q^TQ : log(||Q^TQ-I||)(n)$")
plt.tight_layout()
------------------

[0;36m  Input [0;32mIn [22][0;36m[0m
[0;31m    ``[0m
[0m    ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-22-33566bb9a0a1>, line 16)

