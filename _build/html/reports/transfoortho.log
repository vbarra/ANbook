Traceback (most recent call last):
  File "/usr/local/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/local/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/local/Cellar/python@3.9/3.9.13/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 559, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def cmp(a, b):
    return bool(a > b) - bool(a < b)

def householder(A):
    n = A.shape[1]

    R = A
    Q = np.zeros((n,n))

    # The Householder procedure
    for k in range(n-1):  
        # Create identity matrix of same size as A                                                                    
        I = np.eye(n)

        # Create the vectors x, e and the scalar alpha
        # Python does not have a sgn function, so we use cmp instead
        x = [row[k] for row in R[k:]]
        e = [row[k] for row in I[k:]]
        alpha = -cmp(x[0],0) * np.linalg.norm(x)

        # Using anonymous functions, we create u and v
        u = map(lambda p,q: p + alpha * q, x, e)
        norm_u = np.linalg.norm(u)
        v = map(lambda p: p/norm_u, u)

        # Sous matrice Q
        Q_min = [ [float(i==j) - 2.0 * v[i] * v[j] for i in range(n-k)] for j in range(n-k) ]

        # IntÃ©gration Ã  Q 
        Q_t = [[ Q_i(Q_min,i,j,k) for i in range(n)] for j in range(n)]

        if k == 0:
            Q = Q_t
            R = Q_t@A
        else:
            Q = Q_t@Q
            R = Q_t@R

    return Q.transpose(), R

A = np.array([[12, -51, 4], [6, 167, -68], [-4, 24, -41]])
Q, R = householder(A)

print ("A=",A,"\n")
print ("Q=",Q,"\n")
print ("R=",R,"\n")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Input [0;32mIn [11][0m, in [0;36m<module>[0;34m[0m
[1;32m     39[0m     [38;5;28;01mreturn[39;00m Q[38;5;241m.[39mtranspose(), R
[1;32m     41[0m A [38;5;241m=[39m np[38;5;241m.[39marray([[[38;5;241m12[39m, [38;5;241m-[39m[38;5;241m51[39m, [38;5;241m4[39m], [[38;5;241m6[39m, [38;5;241m167[39m, [38;5;241m-[39m[38;5;241m68[39m], [[38;5;241m-[39m[38;5;241m4[39m, [38;5;241m24[39m, [38;5;241m-[39m[38;5;241m41[39m]])
[0;32m---> 42[0m Q, R [38;5;241m=[39m [43mhouseholder[49m[43m([49m[43mA[49m[43m)[49m
[1;32m     44[0m [38;5;28mprint[39m ([38;5;124m"[39m[38;5;124mA=[39m[38;5;124m"[39m,A,[38;5;124m"[39m[38;5;130;01m\n[39;00m[38;5;124m"[39m)
[1;32m     45[0m [38;5;28mprint[39m ([38;5;124m"[39m[38;5;124mQ=[39m[38;5;124m"[39m,Q,[38;5;124m"[39m[38;5;130;01m\n[39;00m[38;5;124m"[39m)

Input [0;32mIn [11][0m, in [0;36mhouseholder[0;34m(A)[0m
[1;32m     21[0m [38;5;66;03m# Using anonymous functions, we create u and v[39;00m
[1;32m     22[0m u [38;5;241m=[39m [38;5;28mmap[39m([38;5;28;01mlambda[39;00m p,q: p [38;5;241m+[39m alpha [38;5;241m*[39m q, x, e)
[0;32m---> 23[0m norm_u [38;5;241m=[39m [43mnp[49m[38;5;241;43m.[39;49m[43mlinalg[49m[38;5;241;43m.[39;49m[43mnorm[49m[43m([49m[43mu[49m[43m)[49m
[1;32m     24[0m v [38;5;241m=[39m [38;5;28mmap[39m([38;5;28;01mlambda[39;00m p: p[38;5;241m/[39mnorm_u, u)
[1;32m     26[0m [38;5;66;03m# Sous matrice Q[39;00m

File [0;32m<__array_function__ internals>:180[0m, in [0;36mnorm[0;34m(*args, **kwargs)[0m

File [0;32m/usr/local/lib/python3.9/site-packages/numpy/linalg/linalg.py:2516[0m, in [0;36mnorm[0;34m(x, ord, axis, keepdims)[0m
[1;32m   2514[0m     sqnorm [38;5;241m=[39m dot(x[38;5;241m.[39mreal, x[38;5;241m.[39mreal) [38;5;241m+[39m dot(x[38;5;241m.[39mimag, x[38;5;241m.[39mimag)
[1;32m   2515[0m [38;5;28;01melse[39;00m:
[0;32m-> 2516[0m     sqnorm [38;5;241m=[39m [43mdot[49m[43m([49m[43mx[49m[43m,[49m[43m [49m[43mx[49m[43m)[49m
[1;32m   2517[0m ret [38;5;241m=[39m sqrt(sqnorm)
[1;32m   2518[0m [38;5;28;01mif[39;00m keepdims:

File [0;32m<__array_function__ internals>:180[0m, in [0;36mdot[0;34m(*args, **kwargs)[0m

[0;31mTypeError[0m: unsupported operand type(s) for *: 'map' and 'map'
TypeError: unsupported operand type(s) for *: 'map' and 'map'

